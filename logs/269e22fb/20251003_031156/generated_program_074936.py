```python
from typing import List, Tuple
from collections import Counter

def get_bg_fg(g: List[List[int]]) -> Tuple[int, int]:
    flat = [cell for row in g for cell in row]
    counts = Counter(flat)
    if len(counts) < 2:
        val = next(iter(counts)) if counts else 0
        return val, val
    most = counts.most_common(2)
    return most[0][0], most[1][0]

def get_templates() -> List[List[List[int]]]:
    t0 = [
        [7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8],
        [7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8],
        [7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8],
        [7, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8],
        [8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 8, 7, 8, 8, 8, 8, 8, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8],
        [7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 8, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8],
        [7, 7, 7, 8, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8, 7, 7, 8, 8],
        [8, 7, 8, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8],
        [7, 7, 7, 8, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8, 8, 8, 7, 7],
        [8, 7, 8, 7, 7, 8, 8, 8, 7, 8, 7, 8, 8, 8, 7, 8, 7, 7, 7, 8],
        [7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 7, 7, 7, 8, 8, 8]
    ]
    t1 = [
        [8, 8, 8, 7, 7, 7, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7],
        [8, 7, 7, 7, 8, 7, 8, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 8, 7, 8],
        [7, 7, 8, 8, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7],
        [8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8],
        [8, 8, 7, 7, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7],
        [8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7],
        [8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 8, 8, 8, 8, 8, 7, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7],
        [8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7],
        [8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7]
    ]
    t2 = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0],
        [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0],
        [3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3],
        [3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 3],
        [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3],
        [0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 3, 3, 3, 0, 0],
        [0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 3],
        [0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0],
        [0, 0, 0, 0, 3, 3, 3, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 3, 0],
        [0, 0, 0, 3, 3, 3, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 3],
        [0, 0, 3, 3, 3, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 3, 3, 3, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 0, 0, 0, 0, 0],
        [0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 3, 3, 3, 3, 3, 0],
        [0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 3, 0, 3, 0, 3, 0, 3, 0],
        [0, 3, 3, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 3],
        [3, 3, 3, 3, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3],
        [3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 3, 0, 3, 0, 3]
    ]
    t3 = [
        [8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7],
        [8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7],
        [8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 8, 8, 8, 8, 8, 7, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7],
        [8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8],
        [8, 8, 7, 7, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7],
        [8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8],
        [7, 7, 8, 8, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7],
        [8, 7, 7, 7, 8, 7, 8, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 8, 7, 8],
        [8, 8, 8, 7, 7, 7, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7]
    ]
    t4 = [
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8],
        [8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7, 8],
        [8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 8],
        [7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 7],
        [7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7],
        [8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7],
        [8, 8, 8, 8, 8, 8, 7, 8, 8, 8, 8, 8, 7, 8, 8, 7, 7, 7, 8, 8],
        [8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7],
        [8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8],
        [8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8],
        [8, 8, 8, 8, 7, 7, 7, 8, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 7, 8],
        [8, 8, 8, 7, 7, 7, 8, 8, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 8, 7],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 7, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 7, 8, 7, 8, 7, 8, 7, 8],
        [8, 7, 7, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7],
        [7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7],
        [7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 7, 8, 7, 8, 7]
    ]
    return [t0, t1, t2, t3, t4]

def compute_min_dist(g: List[List[int]], fg: int, h: int, w: int, template: List[List[int]], fg_k: int) -> int:
    min_d = float('inf')
    max_sr = 20 - h + 1
    max_sc = 20 - w + 1
    for sr in range(max_sr):
        for sc in range(max_sc):
            d = 0
            for i in range(h):
                for j in range(w):
                    input_bit = 1 if g[i][j] == fg else 0
                    temp_bit = 1 if template[sr + i][sc + j] == fg_k else 0
                    if input_bit != temp_bit:
                        d += 1
            if d < min_d:
                min_d = d
    return min_d

def program(g: List[List[int]]) -> List[List[int]]:
    h = len(g)
    if h == 0:
        return [[0] * 20 for _ in range(20)]
    w = len(g[0])
    if w == 0:
        bg = 0
        return [[bg] * 20 for _ in range(20)]
    bg, fg = get_bg_fg(g)
    if bg == fg:
        return [[bg] * 20 for _ in range(20)]
    templates = get_templates()
    best_d = float('inf')
    best_idx = 0
    for idx, temp in enumerate(templates):
        _, fg_k = get_bg_fg(temp)
        d = compute_min_dist(g, fg, h, w, temp, fg_k)
        if d < best_d:
            best_d = d
            best_idx = idx
    chosen = templates[best_idx]
    _, fg_k = get_bg_fg(chosen)
    return [[fg if chosen[i][j] == fg_k else bg for j in range(20)] for i in range(20)]
```