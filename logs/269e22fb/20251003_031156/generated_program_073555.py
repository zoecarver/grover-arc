```python
from typing import List
from collections import Counter

def get_flat_cells(grid: List[List[int]]) -> List[int]:
    return [cell for row in grid for cell in row]

def compute_dist_sub(bin_input: List[List[int]], mask: List[List[int]], h: int, w: int) -> int:
    return sum(1 for i in range(h) for j in range(w) if bin_input[i][j] != mask[i][j])

def compute_dist_out(mask: List[List[int]], h: int, w: int) -> int:
    return sum(1 for i in range(20) for j in range(20) if not (i < h and j < w) and mask[i][j] == 1)

def render_binary_to_colored(bin_grid: List[List[int]], fg: int, bg: int) -> List[List[int]]:
    return [[fg if cell == 1 else bg for cell in row] for row in bin_grid]

def program(g: List[List[int]]) -> List[List[int]]:
    if not g:
        return [[0] * 20 for _ in range(20)]
    h = len(g)
    w = len(g[0]) if g and g[0] else 0
    flat = get_flat_cells(g)
    counts = Counter(flat)
    if not counts:
        bg = 0
        fg = 0
    else:
        most_common = counts.most_common(2)
        bg = most_common[0][0]
        fg = most_common[1][0] if len(most_common) > 1 else bg
    bin_input = [[0] * 20 for _ in range(20)]
    for i in range(min(h, 20)):
        row = g[i]
        wr = min(len(row), 20)
        for j in range(wr):
            bin_input[i][j] = 1 if row[j] == fg else 0
    masks = [
        # mask 0: Train 1 (7->1, 8->0)
        [
            [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
            [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
            [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0],
            [1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0],
            [0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,0],
            [0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0],
            [0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0],
            [0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0],
            [0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0],
            [0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0],
            [0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0],
            [0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0],
            [1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0],
            [0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0],
            [1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0],
            [0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0],
            [1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1],
            [0,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0],
            [1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0]
        ],
        # mask 1: Train 2 (7->1, 8->0)
        [
            [0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1],
            [0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0],
            [1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
            [0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0],
            [0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
            [0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0],
            [0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1],
            [0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0],
            [0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0],
            [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0],
            [0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0],
            [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1],
            [0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
            [0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
            [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]
        ],
        # mask 2: Train 3 (3->1, 0->0)
        [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0],
            [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
            [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
            [0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1],
            [0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0],
            [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0],
            [0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
            [0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
            [0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
            [0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0],
            [0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0],
            [0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
            [1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1]
        ],
        # mask 3: Train 4 (7->1, 8->0)
        [
            [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
            [0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
            [0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
            [0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1],
            [0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
            [0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
            [0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0],
            [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0],
            [0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0],
            [0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0],
            [0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1],
            [0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0],
            [0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
            [0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0],
            [1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
            [0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0],
            [0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1]
        ],
        # mask 4: Train 5 (7->1, 8->0)
        [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0],
            [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0],
            [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
            [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
            [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
            [0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0],
            [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1],
            [0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0],
            [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
            [0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0],
            [0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
            [0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
            [0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
            [0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0],
            [0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0],
            [0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
            [1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1]
        ]
    ]
    best_k = 0
    min_total = float('inf')
    for k in range(len(masks)):
        d_sub = compute_dist_sub(bin_input, masks[k], min(h, 20), min(w, 20))
        d_out = compute_dist_out(masks[k], min(h, 20), min(w, 20))
        total = d_sub * 401 + d_out
        if total < min_total:
            min_total = total
            best_k = k
    return render_binary_to_colored(masks[best_k], fg, bg)
```