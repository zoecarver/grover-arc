```python
from typing import List, Tuple, Set
from collections import Counter

def flatten_grid(g: List[List[int]]) -> List[int]:
    return [cell for row in g for cell in row]

def detect_background_and_foreground(g: List[List[int]]) -> Tuple[int, int]:
    flat = flatten_grid(g)
    if not flat:
        return 0, 1
    counts = Counter(flat)
    bg_item = counts.most_common(1)[0]
    bg = bg_item[0]
    other_items = list(counts.most_common())[1:]
    fg = other_items[0][0] if other_items else bg
    return bg, fg

def pad_input_to_20x20(g: List[List[int]], bg: int) -> List[List[int]]:
    padded_rows = []
    for i in range(min(len(g), 20)):
        row = g[i][:20] + [bg] * max(0, 20 - len(g[i]))
        padded_rows.append(row[:20])
    while len(padded_rows) < 20:
        padded_rows.append([bg] * 20)
    return padded_rows

def get_foreground_positions(grid: List[List[int]], fg_val: int) -> Set[Tuple[int, int]]:
    positions = set()
    rows = len(grid)
    for i in range(rows):
        cols = len(grid[i])
        for j in range(min(cols, 20)):
            if grid[i][j] == fg_val:
                positions.add((i, j))
    return positions

def render_mask_to_grid(mask: List[List[int]], fg: int, bg: int) -> List[List[int]]:
    grid = [[bg] * 20 for _ in range(20)]
    for r in range(20):
        for c in range(20):
            if mask[r][c] == 1:
                grid[r][c] = fg
    return grid

def get_masks() -> List[List[List[int]]]:
    # Template 0 from Training Example 1 (1 where 7, 0 where 8)
    t0 = [
        [1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
        [1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0],
        [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0],
        [1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0],
        [0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,1,1,1,0],
        [0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,0],
        [0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,0],
        [0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,1,1,0],
        [0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0],
        [0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,1,1,0],
        [0,1,0,0,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0],
        [0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,0,0,1,1,0],
        [0,1,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0,1,1,0],
        [1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0],
        [0,1,0,1,1,0,0,0,0,1,0,0,0,0,1,1,1,1,1,0],
        [1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,1,1,0,0],
        [0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0],
        [1,1,1,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1],
        [0,1,0,1,1,0,0,0,1,0,1,0,0,0,1,0,1,1,1,0],
        [1,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1,1,0,0,0]
    ]
    # Template 1 from Training Example 2 (1 where 7, 0 where 8)
    t1 = [
        [0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1],
        [0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0],
        [1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
        [0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0],
        [0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
        [0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0],
        [0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1],
        [0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0],
        [0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0],
        [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0],
        [0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0],
        [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0],
        [0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
        [0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1],
        [0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
        [0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
        [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1]
    ]
    # Template 2 from Training Example 3 (1 where 3, 0 where 0)
    t2 = [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0],
        [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
        [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
        [0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0],
        [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0],
        [0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
        [0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
        [0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
        [0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0],
        [0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0],
        [0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
        [1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1]
    ]
    # Template 3 from Training Example 4 (1 where 7, 0 where 8)
    t3 = [
        [0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
        [0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1],
        [0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1],
        [0,0,1,1,1,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1],
        [0,1,1,1,1,1,0,0,0,0,0,1,1,1,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0],
        [0,1,1,0,0,1,0,1,1,0,1,1,1,1,1,1,1,1,1,0],
        [0,1,1,0,0,1,0,1,1,1,1,0,0,0,0,0,0,0,1,0],
        [0,1,1,0,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0],
        [0,1,1,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,1,0],
        [0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,1],
        [0,1,1,1,1,1,0,0,0,0,1,0,0,0,0,1,1,0,1,0],
        [0,0,1,1,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
        [0,1,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0],
        [1,1,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,1,1,1],
        [0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0],
        [0,0,0,1,1,1,0,0,1,0,0,0,1,0,0,0,0,1,1,1]
    ]
    # Template 4 from Training Example 5 (1 where 7, 0 where 8)
    t4 = [
        [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0],
        [0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0],
        [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1],
        [1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1],
        [0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1],
        [0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,1,1,1,0,0],
        [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0],
        [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1],
        [0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0],
        [0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0],
        [0,0,0,0,1,1,1,0,0,1,0,1,0,1,0,0,0,0,1,0],
        [0,0,0,1,1,1,0,0,0,1,0,1,0,1,0,0,0,0,0,1],
        [0,0,1,1,1,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
        [0,1,1,1,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0],
        [0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,1,1,1,1,0],
        [0,1,1,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,1,0],
        [0,1,1,0,0,0,0,0,0,1,0,1,0,1,0,1,0,1,0,1],
        [1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1],
        [1,1,1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1]
    ]
    return [t0, t1, t2, t3, t4]

def choose_best_mask(input_pos: Set[Tuple[int, int]], masks: List[List[List[int]]]) -> int:
    n_input = len(input_pos)
    if n_input == 0:
        return 0
    best_score = (-1.0, -1.0, float('inf'))
    best_idx = 0
    for idx, mask in enumerate(masks):
        template_pos = get_foreground_positions(mask, 1)
        n_template = len(template_pos)
        inter = len(input_pos & template_pos)
        coverage = inter / n_input
        precision = inter / n_template if n_template > 0 else 0.0
        additions = n_template - inter
        score = (coverage, precision, -additions)
        if score > best_score:
            best_score = score
            best_idx = idx
    return best_idx

def program(g: List[List[int]]) -> List[List[int]]:
    bg, fg = detect_background_and_foreground(g)
    padded = pad_input_to_20x20(g, bg)
    input_pos = get_foreground_positions(padded, fg)
    masks = get_masks()
    best_idx = choose_best_mask(input_pos, masks)
    return render_mask_to_grid(masks[best_idx], fg, bg)
```