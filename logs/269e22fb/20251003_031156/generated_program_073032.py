```python
from typing import List, Tuple, Set
from collections import Counter

def detect_bg_fg(g: List[List[int]]) -> Tuple[int, int]:
    flat = [cell for row in g for cell in row]
    if not flat:
        return 0, 1
    counts = Counter(flat)
    if len(counts) < 2:
        bg = next(iter(counts), 0)
        return bg, bg
    sorted_counts = sorted(counts.items(), key=lambda kv: kv[1], reverse=True)
    bg = sorted_counts[0][0]
    fg = sorted_counts[1][0]
    return bg, fg

def pad_to_20x20(g: List[List[int]], fill_value: int) -> List[List[int]]:
    result = [[fill_value] * 20 for _ in range(20)]
    for i, row in enumerate(g):
        if i >= 20:
            break
        for j, val in enumerate(row):
            if j >= 20:
                break
            result[i][j] = val
    return result

def get_fg_positions(grid: List[List[int]], fg_value: int) -> Set[Tuple[int, int]]:
    positions = set()
    for i in range(20):
        for j in range(20):
            if grid[i][j] == fg_value:
                positions.add((i, j))
    return positions

def get_templates() -> List[List[List[int]]]:
    t0 = [
        [7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8],
        [7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 8],
        [7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8],
        [7, 7, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8],
        [8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 7, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 8, 7, 8, 8, 8, 8, 8, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8],
        [7, 7, 7, 8, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 7, 7, 8],
        [8, 7, 8, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 8],
        [7, 7, 7, 8, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8, 7, 7, 8, 8],
        [8, 7, 8, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8],
        [7, 7, 7, 8, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 7, 8, 8, 8, 7, 7],
        [8, 7, 8, 7, 7, 8, 8, 8, 7, 8, 7, 8, 8, 8, 7, 8, 7, 7, 7, 8],
        [7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 7, 7, 7, 8, 8, 8]
    ]
    t1 = [
        [8, 8, 8, 7, 7, 7, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7],
        [8, 7, 7, 7, 8, 7, 8, 8, 8, 7, 8, 7, 8, 8, 8, 7, 7, 8, 7, 8],
        [7, 7, 8, 8, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7],
        [8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8],
        [8, 8, 7, 7, 8, 7, 7, 8, 8, 8, 7, 8, 8, 8, 8, 7, 8, 7, 7, 7],
        [8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 7, 8, 8, 8, 8, 7, 7, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 8, 7, 7, 7],
        [8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 8, 8, 8, 8, 8, 7, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 8, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 7, 8, 8, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 7, 7, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 8, 8, 7, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8],
        [8, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 8, 8, 8, 7, 7],
        [8, 8, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7, 7],
        [8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7],
        [8, 8, 8, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 7, 7]
    ]
    t2 = [
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0],
        [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 3, 3, 0],
        [0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 3, 0],
        [3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 3, 3],
        [3, 3, 3,